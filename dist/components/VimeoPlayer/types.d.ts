import type { CueChangeEvent, CuePointEvent, DurationChangeEvent, Error as ErrorProps, FullScreenChangeEvent, LoadedEvent, PlaybackRateEvent, QualityChangeEvent, ResizeEvent, TextTrackChangeEvent, TimeEvent, VimeoCameraProps, VimeoChapter, VolumeChangeEvent } from '@vimeo/player';
export declare type PlayEvent = TimeEvent;
export declare type PlayingEvent = TimeEvent;
export declare type PauseEvent = TimeEvent;
export declare type EndedEvent = TimeEvent;
export declare type TimeUpdateEvent = TimeEvent;
export declare type ProgressEvent = TimeEvent;
export declare type SeekingEvent = TimeEvent;
export declare type SeekedEvent = TimeEvent;
export type { TextTrackChangeEvent };
export declare type ChapterChangeEvent = VimeoChapter;
export type { CueChangeEvent };
export type { CuePointEvent };
export type { VolumeChangeEvent };
export type { PlaybackRateEvent };
export declare type PlayerErrorEvent = ErrorProps;
export type { LoadedEvent };
export type { DurationChangeEvent };
export type { FullScreenChangeEvent };
export type { QualityChangeEvent };
export declare type CameraChangeEvent = VimeoCameraProps;
export type { ResizeEvent };
export declare type InteractiveHotspotClickedEvent = {
    action: 'event' | 'none' | 'overlay' | 'seek' | 'url';
    actionPreference: {
        pauseOnAction: boolean;
        overlayId: number;
        seekTo: number;
        url: string;
    };
    currentTime: number;
    customPayloadData: null;
    hotspotId: number;
};
export declare type InteractiveOverlayPanelClickedEvent = {
    action: 'clickthrough' | 'close' | 'event' | 'none' | 'seek';
    actionPreference: {
        pauseOnAction: boolean;
        seekTo: number;
        url: string;
    };
    currentTime: number;
    customPayloadData: null;
    overlayId: number;
    panelId: string;
};
export declare type VimeoPlayerProps = {
    className?: string;
    fullWidth?: boolean;
    id: number | string;
    autopause?: boolean;
    autoplay?: boolean;
    background?: boolean;
    byline?: boolean;
    color?: string;
    controls?: boolean;
    dnt?: boolean;
    height?: number;
    interactive_params?: string;
    keyboard?: boolean;
    loop?: boolean;
    maxheight?: number;
    maxwidth?: number;
    muted?: boolean;
    pip?: boolean;
    playsinline?: boolean;
    portrait?: boolean;
    quality?: '4K' | '2K' | '1080p' | '720p' | '540p' | '360p' | '240p';
    responsive?: boolean;
    speed?: boolean;
    texttrack?: 'de' | 'en' | 'es' | 'fr' | string;
    title?: boolean;
    transparent?: boolean;
    width?: number;
    onPlay?: (event: TimeEvent) => void;
    onPlaying?: (event: TimeEvent) => void;
    onPause?: (event: TimeEvent) => void;
    onEnded?: (event: TimeEvent) => void;
    onTimeUpdate?: (event: TimeEvent) => void;
    onProgress?: (event: TimeEvent) => void;
    onSeeking?: (event: TimeEvent) => void;
    onSeeked?: (event: TimeEvent) => void;
    onTextTrackChange?: (event: TextTrackChangeEvent) => void;
    onChapterChange?: (event: VimeoChapter) => void;
    onCueChange?: (event: CueChangeEvent) => void;
    onCuePoint?: (event: CuePointEvent) => void;
    onVolumeChange?: (event: VolumeChangeEvent) => void;
    onPlaybackRateChange?: (event: PlaybackRateEvent) => void;
    onBufferStart?: () => void;
    onBufferEnd?: () => void;
    onError?: (event: ErrorProps) => void;
    onLoaded?: (event: LoadedEvent) => void;
    onDurationChange?: (event: DurationChangeEvent) => void;
    onFullScreenChange?: (event: FullScreenChangeEvent) => void;
    onQualityChange?: (event: QualityChangeEvent) => void;
    onCameraChange?: (event: CameraChangeEvent) => void;
    onResize?: (event: ResizeEvent) => void;
    onEnterPictureInPicture?: () => void;
    onLeavePictureInPicture?: () => void;
    onInteractiveHotspotClicked?: (event: InteractiveHotspotClickedEvent) => void;
    onInteractiveOverlayPanelClicked?: (event: InteractiveOverlayPanelClickedEvent) => void;
};
